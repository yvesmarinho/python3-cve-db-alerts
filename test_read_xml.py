"""
https://towardsdatascience.com/extracting-information-from-xml-files-into-a-pandas-dataframe-11f32883ce45

https://stackabuse.com/reading-and-writing-xml-files-in-python-with-pandas/

https://pt.stackoverflow.com/questions/441078/lendo-e-processando-arquivo-xml-de-uma-base-cve-common-vulnerabilities-and-expo
"""
# import xml.etree.ElementTree as ET
import lxml.etree as ET
import xml.etree.ElementTree as tree
import pandas as pd
import wget
import os
import re
import sys

xmlFiles = "allitems-cvrf-year-1999.xml"
xsdFile = "cve_1.0.xsd"

if os.path.exists(xsdFile):
    os.remove(xsdFile)
else:
    print("Can not delete the file as it doesn't exists")

if os.path.exists(xmlFiles):
    os.remove(xmlFiles)
else:
    print("Can not delete the file as it doesn't exists")

URLXSD = "https://cve.mitre.org/schema/cve/cve_1.0.xsd"
URLXML = f"https://cve.mitre.org/data/downloads/{xmlFiles}"


wget.download(URLXML, out=xmlFiles)

# xml_data = open(files, 'r').read()  # Read file
# root = ET.XML(xml_data)  # Parse XML
xml = ET.parse(files)
# contentXmlOnBytes = ET.tostring(xml, pretty_print=False)
# contentXmlOnString = contentXmlOnBytes.decode("utf-8")
root = tree.getroot()
print("Type root", type(root))
for child in root:
    print(type(child))
    print(child)
    break
sys.exit(0)

data = []
cols = []
for i, child in enumerate(root):
    data.append([subchild.text for subchild in child])
    cols.append(child.tag)
print(data)
print(cols)
df = pd.DataFrame(data).T  # Write in DF and transpose it
df.columns = cols  # Update column names
print(df)

# """
#     novo cÃ³digo
# """
# matchCounter = 0
# newCveList = []
#
# #Parte 1
# #Vamos abrir o xml e transforma-lo em uma string para conseguirmos usar regex nele
# xml = et.parse(files)
# contentXmlOnBytes = et.tostring(xml, pretty_print=False)
# contentXmlOnString = contentXmlOnBytes.decode("utf-8")
#
# #Parte 2
# #Vamos pegar todos os CVE's do xml com regex e do arquivo txt
# allXmlCve = re.findall(r'CVE-\d{4}-\d{4,7}', contentXmlOnString)
# print(allXmlCve)
# sys.exit(1)
# with open('./lista.txt') as arq:
#     txtCveList = [linha.rstrip() for linha in arq]
#
# #Parte 3 e 4
# #Vamos comparar os resultados das listas e utilizar as
# #variaveis de controle para verificarmos se houveram novos CVE's
# #e imprimir os resultados
# for cve in allXmlCve:
#     if cve not in txtCveList and cve not in newCveList:
#         print('Novo CVE encontrado:', cve)
#         newCveList.append(cve)
#         matchCounter = matchCounter + 1
#
# if (matchCounter > 0):
#     with open('./lista.txt', 'a') as arq:
#         for newCve in newCveList:
#             arq.write(f'\n{newCve}')
#
#
# if(matchCounter == 0):
#     print('Sem CVE Novo')