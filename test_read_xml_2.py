"""
https://stackoverflow.com/questions/33613419/understanding-xml-and-xsd-parsing-in-python-3
usar o link abaixo para criar a estrutura do dataframe do CVE
https://stackoverflow.com/questions/24390817/parse-xml-schema-definition-to-csv-with-python

"""
import requests
import xmlschema
import xml.etree.ElementTree as ET
from bs4 import BeautifulSoup
import pandas as pd
import wget
import os
import re
import sys
import pprint

xmlFiles = "allitems.xml"
xsdFile = "cve_1.0.xsd"

# if os.path.exists(xsdFile):
#     os.remove(xsdFile)
# else:
#     print("Can not delete the file as it doesn't exists")
#
# if os.path.exists(xmlFiles):
#     os.remove(xmlFiles)
# else:
#     print("Can not delete the file as it doesn't exists")

URLXSD = "https://cve.mitre.org/schema/cve/cve_1.0.xsd"
URLXML = f"https://cve.mitre.org/data/downloads/{xmlFiles}"

# print("Download xml..")
# wget.download(URLXML, out=xmlFiles)
# print("Download xsd..")
# wget.download(URLXSD, out=xsdFile)

# print("processando...")
# xsd = xmlschema.XMLSchema(xsdFile)
# print("xml1 valid= ", xsd.validate(xmlFiles))
# # xsd_dict = xsd.to_dict(xmlFiles)
# tree = ET.parse(xmlFiles)
# root = tree.getroot()
# print("Tipo da vari√°vel root= ", root)

def xsd_to_dict(xsd_path):
    print("xsd_path= ", xsd_path)
    super_dict = {}
    soup = BeautifulSoup(open(xsd_path), "html.parser")
    print("soup =", soup)
    for complex_type in soup.find_all('xsd:complextype'):
        xsd_parsed = [x for x in ",".join(str(complex_type).split("\n"))
            .replace("</xsd:sequence>", "")
            .replace("'<xsd:sequence>", "")
            .replace("<xsd:", "")
            .replace("</xsd:complextype>", "")
            .replace("</xsd:element>", "")
            .replace(">", "").replace("sequence", "")
            .split(",") if x != ""]
        print("xsd_parsed =", xsd_parsed)

        if len(xsd_parsed[0]) > len("complextype") + 1:
            matrix_list = [e.split(" ") for e in xsd_parsed[-len(xsd_parsed) + 1:]]

            level_1 = ["|".join(["".join([":".join(final.split("=")) for final in y if len(final.split("=")) == 2])
                                 for y in [x.split(",") for x in item]]) for item in matrix_list]
            level_1.insert(0, xsd_parsed[0])
            for x in level_1[-len(xsd_parsed) + 1:]:
                flattened_dict = {x.split(":")[0]:"-".join(x.split(":")[-len(x.split(":")) + 1:])
                       for x in (level_1[0] + x).replace("=", ":").split("|")}
                xPath = flattened_dict.get("complextype name")
                xmlName = flattened_dict.get("name")
                dataType = flattened_dict.get("type")

                if xmlName != None:
                    final_dict = {x.split(":")[0]:x.split(":")[1]
                                for x in str("xpath:"+str(xPath)+",xmlFieldName:"+str(xmlName)+",dataPath:"+str(dataType)).split(",")}
                    for k, v in final_dict.items():
                        super_dict.setdefault(k, []).append(v)
    print("super_dict= ", super_dict)
    return super_dict



def xsd_to_csv(xsd_path):
    print("xsd_path= ", xsd_path)
    pd.DataFrame(xsd_to_dict(xsd_path)).to_csv(xsd_path.replace(".xsd", ".csv"))
    return "done"


xsd_to_csv(xsdFile)
print("xsd_to_csv")